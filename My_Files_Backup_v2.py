"""–ü—Ä–æ–≥—Ä–∞–º–º–∞ –¥–ª—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è (–∞—Ä—Ö–∏–≤–∞—Ü–∏–∏) —Ñ–∞–π–ª–æ–≤ —Å —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –ø–∞–ø–æ–∫"""

import os
import shutil
import time
import calendar
import win32com.client
import tkinter as tk
from tkinter import filedialog
from tkcalendar import DateEntry
from sys import exit
import babel.numbers  # –Ω—É–∂–Ω–æ –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –≤ exe

# –ò—Å–∫–ª—é—á–∞–µ–º –º—É–ª—å—Ç–∏–ø—Ä–æ—Ü–µ—Å—Å–∏–Ω–≥
proc_name = 'my_files_backup.exe'
my_pid = os.getpid()
wmi = win32com.client.GetObject('winmgmts:')
all_procs = wmi.InstancesOf('Win32_Process')
for proc in all_procs:
    if proc.Properties_("Name").Value == proc_name:
        proc_pid = proc.Properties_("ProcessID").Value
        if proc_pid != my_pid:
            os.kill(proc_pid, 9)

time_of_modified = os.path.getmtime  # –î–∞—Ç–∞ –º–æ–¥–∏—Ñ–∏–∫–∞—Ü–∏–∏
time_of_created = os.path.getctime  # –î–∞—Ç–∞ —Å–æ–∑–¥–∞–Ω–∏—è
created_or_modified = os.path.getatime  # –¥–∞—Ç–∞ –ø–æ—Å–ª–µ–¥–Ω–µ–≥–æ –∏–∑–º–µ–Ω–µ–Ω–∏—è, –Ω—É–∂–Ω–∞ –¥–ª—è –ø–æ–Ω–∏–º–∞–Ω–∏—è –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è –≤—ã–±–æ—Ä–∞ –≤ –∫–æ–¥–µ


def make_menu(w):
    """–ö–æ–º–∞–Ω–¥—ã –≤—ã—Ä–µ–∑–∞—Ç—å/–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å/–≤—Å—Ç–∞–≤–∏—Ç—å"""
    global the_menu
    the_menu = tk.Menu(w, tearoff=0)
    the_menu.add_command(label="–í—ã—Ä–µ–∑–∞—Ç—å")
    the_menu.add_command(label="–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å")
    the_menu.add_command(label="–í—Å—Ç–∞–≤–∏—Ç—å")
    the_menu.add_command(label="–£–¥–∞–ª–∏—Ç—å")


def show_menu(e):
    """–ö–æ–Ω—Ç–µ–∫—Å—Ç–Ω–æ–µ –º–µ–Ω—é —Å –ø–µ—Ä–µ—á–Ω–µ–º –∫–æ–º–∞–Ω–¥"""
    w = e.widget
    the_menu.entryconfigure("–í—ã—Ä–µ–∑–∞—Ç—å", command=lambda: w.event_generate("<<Cut>>"))
    the_menu.entryconfigure("–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å", command=lambda: w.event_generate("<<Copy>>"))
    the_menu.entryconfigure("–í—Å—Ç–∞–≤–∏—Ç—å", command=lambda: w.event_generate("<<Paste>>"))
    the_menu.entryconfigure("–£–¥–∞–ª–∏—Ç—å", command=lambda: w.event_generate("<<Clear>>"))
    the_menu.tk.call("tk_popup", the_menu, e.x_root, e.y_root)


archive_choise = 0
copy_choise = 0
zero_folder = 0
one_folder = 0
two_folders = 0
three_folders = 0
four_folders = 0


def error_window(xxx):
    """–û–∫–Ω–æ —Å –æ—à–∏–±–∫–æ–π"""
    er_text = f'\n{xxx}\n'
    er_win = tk.Toplevel(root)
    er_win.geometry('240x70')
    root.eval(f'tk::PlaceWindow {str(er_win)} center')
    photo_er = tk.PhotoImage(file='backup_logo.png')
    er_win.iconphoto(False, photo_er)
    er_win.resizable(False, False)
    er_win['bg'] = '#EEEEEE'
    er_win.wm_attributes('-alpha', 0.9)
    er_lab = tk.Label(er_win, text=er_text, font='Arial 12')
    er_lab.pack()
    er_win.after(2000, er_win.destroy)
    er_win.grid()


def final_window():
    """–û–∫–Ω–æ –æ–∫–æ–Ω—á–∞–Ω–∏—è –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""
    er_win = tk.Toplevel()
    er_win.geometry('240x120')
    root.eval(f'tk::PlaceWindow {str(er_win)} center')
    photo_fin = tk.PhotoImage(file='backup_logo.png')
    er_win.iconphoto(False, photo_fin)
    er_win.resizable(False, False)
    er_win['bg'] = '#EEEEEE'
    er_win.wm_attributes('-alpha', 1)
    er_lab = tk.Label(er_win, text='\n–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ\n', font='Arial 12')
    er_lab.pack()
    er_win_but = tk.Button(er_win, text='OK', command=lambda: er_win.destroy(), width=8, height=2)
    er_win_but.pack()
    # er_win.after(3000, er_win.destroy)
    # er_win.grid()


def get_folder_path():
    """–ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏"""
    folder_selected = filedialog.askdirectory()
    folder_path.set(folder_selected)


def get_folders_pathes():
    """–ö–Ω–æ–ø–∫–∞ –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏"""
    folder_selected_from = filedialog.askdirectory()
    folders_pathes.set(folder_selected_from)


def copy_choise_func():
    """–í—ã–±–æ—Ä –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è"""
    global copy_choise, archive_choise
    copy_choise = 1,
    archive_choise = 0


def archive_choise_func():
    """–í—ã–±–æ—Ä –∞—Ä—Ö–∏–≤–∞—Ü–∏–∏"""
    global copy_choise, archive_choise
    copy_choise = 0,
    archive_choise = 1


def time_of_modified_func():
    """–ü–æ –¥–∞—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è"""
    global time_of_modified, created_or_modified
    created_or_modified = time_of_modified
    return created_or_modified


def time_of_created_func():
    """–ü–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è"""
    global time_of_created, created_or_modified
    created_or_modified = time_of_created
    return created_or_modified


def zero_folder_func():
    """0 –ø–∞–ø–æ–∫ –≤ –≥–ª—É–±–∏–Ω—É, –ø—Ä–æ—Å—Ç–æ –∫–æ–ø–∏—è"""
    global zero_folder, one_folder, two_folders, three_folders, four_folders
    zero_folder = 1
    one_folder = two_folders = three_folders = four_folders = 0


def one_folder_func():
    """1 –ø–∞–ø–∫–∞ –≤ –≥–ª—É–±–∏–Ω—É"""
    global zero_folder, one_folder, two_folders, three_folders, four_folders
    one_folder = 1
    zero_folder = two_folders = three_folders = four_folders = 0


def two_folders_func():
    """2 –ø–∞–ø–∫–∏ –≤ –≥–ª—É–±–∏–Ω—É"""
    global zero_folder, one_folder, two_folders, three_folders, four_folders
    two_folders = 1
    zero_folder = one_folder = three_folders = four_folders = 0


def three_folders_func():
    """2 –ø–∞–ø–∫–∏ –≤ –≥–ª—É–±–∏–Ω—É"""
    global zero_folder, one_folder, two_folders, three_folders, four_folders
    three_folders = 1
    zero_folder = one_folder = two_folders = four_folders = 0


def four_folders_func():
    """2 –ø–∞–ø–∫–∏ –≤ –≥–ª—É–±–∏–Ω—É"""
    global zero_folder, one_folder, two_folders, three_folders, four_folders
    four_folders = 1
    zero_folder = one_folder = two_folders = three_folders = 0


# –ì–ª–∞–≤–Ω–æ–µ –æ–∫–Ω–æ
root = tk.Tk()
root.title('–ë—ç–∫–∞–ø –ú–æ–∏—Ö –§–∞–π–ª–æ–≤')
root.geometry('800x460')
root.eval('tk::PlaceWindow . center')
photo = tk.PhotoImage(file='backup_logo.png')
root.iconphoto(False, photo)
root.resizable(False, False)
root['bg'] = '#EEEEEE'
root.wm_attributes('-alpha', 1)
make_menu(root)  # –°—Ä–∞–∑—É –æ–ø—Ä–µ–¥–µ–ª–∏–º —Ñ—É–Ω–∫—Ü–∏—é —Å –º–µ–Ω—é—à–∫–∞–º–∏
# –ì–ª–∞–≤–Ω–∞—è –Ω–∞–¥–ø–∏—Å—å
label_name = tk.Label(text='–ó–∞–π–º—ë–º—Å—è –ë—ç–∫–∞–ø–æ–º üòè', font="Arial 14 bold", foreground='#245175', background='#EEEEEE')
label_name.pack()

# –û–±–ª–∞—Å—Ç—å –ø–æ–¥ —Ç–µ–∫—Å—Ç
frame_text = tk.Frame(root)
frame_text.place(relx=0.025, rely=0.08, relheight=0.50, relwidth=0.95)
label_from = tk.Label(frame_text, text='', font="Arial 12", background='#EEEEEE')
label_from.pack()
# –ü–æ–ª–µ –ø–æ–¥ —Ç–µ–∫—Å—Ç (–º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω–æ–µ —Å–æ —Å–∫—Ä–æ–ª–ª–∏–Ω–≥–æ–º) —Å –ø–µ—Ä–µ—á–Ω–µ–º –ø—É—Ç–µ–π –ø–∞–ø–æ–∫/—Ñ–∞–π–ª–æ–≤
text_area = tk.Text(frame_text, font='Arial 10')
with open('Files_Backup_path_from.txt') as f1:
    text_from = f1.read()  # –ü—Ä–æ—á–∏—Ç–∞–µ–º —Ñ–∞–π–ª–∏–∫, —á—Ç–æ–±—ã –≤—Å—Ç–∞–≤–∏—Ç—å –∏–Ω—Ñ—É –∏–∑ –Ω–µ–≥–æ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
    f1.close()
text_area.insert("1.0", text_from)
scrollbar = tk.Scrollbar(frame_text)
scrollbar.config(command=text_area.yview)
text_area.config(yscrollcommand=scrollbar.set)
scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
text_area.pack(expand=tk.YES, fill=tk.BOTH)
text_area.bind_class("Text", "<Button-3><ButtonRelease-3>", show_menu)  # –ú–µ–Ω—é—à–∫–∞
# –°–¥–µ–ª–∞–µ–º –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏
folders_pathes = tk.StringVar()
but_find_1 = tk.Button(label_from, text="      –û—Ç–∫—É–¥–∞      ",
                       command=lambda: [get_folders_pathes(), text_area.insert('end', f'{folders_pathes.get()}\n')])
but_find_1.pack()
# –û–±–ª–∞—Å—Ç—å –ø–æ–¥ —Ç–µ–∫—Å—Ç –∏ –ø–æ–ª–µ –æ–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞ –¥–ª—è –ø—É—Ç–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è
frame_text_endpoint = tk.Frame(root, background='#EEEEEE')
frame_text_endpoint.place(relx=0.025, rely=0.61, relwidth=0.95)
label_where = tk.Label(frame_text_endpoint, text='', font="Arial 12", background='#EEEEEE')
label_where.pack()
# –°–¥–µ–ª–∞–µ–º —Å—Ç—Ä–æ–∫—É –∏ –∫–Ω–æ–ø–∫—É –≤—ã–±–æ—Ä–∞ –ø–∞–ø–∫–∏
folder_path = tk.StringVar()
text_endpoint = tk.Entry(frame_text_endpoint, font='Arial 10', textvariable=folder_path)
with open('Files_Backup_path_to.txt') as f2:
    text_to = f2.read()  # –ü—Ä–æ—á–∏—Ç–∞–µ–º —Ñ–∞–π–ª–∏–∫, —á—Ç–æ–±—ã –≤—Å—Ç–∞–≤–∏—Ç—å –∏–Ω—Ñ—É –∏–∑ –Ω–µ–≥–æ –≤ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ –ø–æ–ª–µ
    f2.close()
text_endpoint.insert(0, text_to)  # –í—Å—Ç–∞–≤–∏–º —Ç–µ–∫—Å—Ç –∏–∑ —Ñ–∞–π–ª–∞
but_find_2 = tk.Button(text_endpoint, text="      –ö—É–¥–∞      ", command=get_folder_path)
but_find_2.pack(side=tk.RIGHT)
text_endpoint.pack(fill=tk.X)
text_endpoint.bind_class("Entry", "<Button-3><ButtonRelease-3>", show_menu)  # –ú–µ–Ω—é—à–∫–∞

# –û–±–ª–∞—Å—Ç—å –ø–æ–¥ –≥–∞–ª–æ—á–∫–∏ –∏ –∫–Ω–æ–ø–æ—á–∫–∏ ‚Ññ1
choise_frame_for_folders = tk.Frame(root, background='#EEEEEE')
choise_frame_for_folders.place(relx=0.025, rely=0.76, relheight=0.06, relwidth=0.95)

# –†–∞–±–∏–æ –±–∞—Ç–æ–Ω—ã, –≤—ã–±–æ—Ä –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –ø–∞–ø–æ–∫ –≤ –≥–ª—É–±–∏–Ω—É
folders_in = tk.IntVar()  # —á—Ç–æ–± –±—ã–ª –ø—É—Å—Ç–æ–π –±–∞—Ç–æ–Ω
choise_label_for_folders = tk.Label(choise_frame_for_folders, text='–í—ã–±–µ—Ä–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–∞–ø–æ–∫ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ –≤ –≥–ª—É–±–∏–Ω—É:   ')
choise_label_for_folders.pack(side=tk.LEFT)
btn_folder_4 = tk.Radiobutton(choise_frame_for_folders, variable=folders_in, value=5, text='4   ',
                              command=four_folders_func)
btn_folder_4.pack(side=tk.LEFT)
btn_folder_3 = tk.Radiobutton(choise_frame_for_folders, variable=folders_in, value=4, text='3   ',
                              command=three_folders_func)
btn_folder_3.pack(side=tk.LEFT)
btn_folder_2 = tk.Radiobutton(choise_frame_for_folders, variable=folders_in, value=3, text='2   ',
                              command=two_folders_func)
btn_folder_2.pack(side=tk.LEFT)
btn_folder_1 = tk.Radiobutton(choise_frame_for_folders, variable=folders_in, value=2, text='1   ',
                              command=one_folder_func)
btn_folder_1.pack(side=tk.LEFT)
btn_folder_0 = tk.Radiobutton(choise_frame_for_folders, variable=folders_in, value=1, text='0  (–∫–æ–ø–∏—è)',
                              command=zero_folder_func)
btn_folder_0.pack(side=tk.LEFT)
label_me = tk.Label(choise_frame_for_folders, text='     Design   by   DEMSTON  ', font=('Arial', 9), foreground='Gray',
                    height=2, width=28)
label_me.pack(side=tk.RIGHT)

# –û–±–ª–∞—Å—Ç—å –ø–æ–¥ –≥–∞–ª–æ—á–∫–∏ –∏ –∫–Ω–æ–ø–æ—á–∫–∏ ‚Ññ2
choise_frame = tk.Frame(root, background='#EEEEEE')
choise_frame.place(relx=0.025, rely=0.84, relheight=0.1, relwidth=0.95)
# –ß–µ–∫-–±–æ–∫—Å, —Ä–∞–¥–∏–æ –±–∞—Ç–æ–Ω (–∫–æ–ø–∏—è/–∞—Ä—Ö–∏–≤)
label_checkbox_copyarchive = tk.Label(choise_frame, background='#EEEEEE')
label_checkbox_copyarchive.pack(side=tk.LEFT)
copyarchive = tk.IntVar()  # —á—Ç–æ–± –±—ã–ª –ø—É—Å—Ç–æ–π –±–∞—Ç–æ–Ω
checkbox_archive = tk.Radiobutton(label_checkbox_copyarchive, value=2, variable=copyarchive, text='–ó–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞—Ç—å     ',
                                  command=archive_choise_func)
checkbox_archive.pack(side=tk.TOP)
checkbox_copy = tk.Radiobutton(label_checkbox_copyarchive, value=1, variable=copyarchive, text='–°–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å           ',
                               command=copy_choise_func)
checkbox_copy.pack(side=tk.BOTTOM)
label_behind_radio = tk.Label(choise_frame, background='#EEEEEE', height=3, width=1)
label_behind_radio.pack(side=tk.LEFT)
# –ß–µ–∫-–±–æ–∫—Å, —Ä–∞–¥–∏–æ –±–∞—Ç–æ–Ω (—Å–æ–∑–¥–∞–Ω–∏–µ/–∏–∑–º–µ–Ω–µ–Ω–∏–µ)
label_checkbox_madeedit = tk.Label(choise_frame, background='#EEEEEE')
label_checkbox_madeedit.pack(side=tk.LEFT)
madeedit = tk.IntVar()  # —á—Ç–æ–± –±—ã–ª –ø—É—Å—Ç–æ–π –±–∞—Ç–æ–Ω
checkbox_made = tk.Radiobutton(label_checkbox_madeedit, value=1, variable=madeedit, text='–ü–æ –¥–∞—Ç–µ —Å–æ–∑–¥–∞–Ω–∏—è            ',
                               command=time_of_created_func)
checkbox_made.pack(side=tk.TOP)
checkbox_edit = tk.Radiobutton(label_checkbox_madeedit, value=2, variable=madeedit, text='–ü–æ –¥–∞—Ç–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è         ',
                               command=time_of_modified_func)
checkbox_edit.pack(side=tk.BOTTOM)
label_behind_date = tk.Label(choise_frame, background='#EEEEEE', height=3, width=1)
label_behind_date.pack(side=tk.LEFT)
# –î–∞—Ç–∞
label_date_entry = tk.Label(choise_frame, background='#EEEEEE')
label_date_entry.pack(side=tk.LEFT)
label_date_text = tk.Label(label_date_entry, text='–ò–∑–º–µ–Ω–µ–Ω–æ –ø–æ—Å–ª–µ:', background='#EEEEEE')
label_date_text.pack(side=tk.TOP)
date_entry = DateEntry(label_date_entry, width=10, bg="darkblue", fg="white", date_pattern='dd.mm.yyyy')
date_entry.pack(side=tk.BOTTOM)


def main_function():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è. –ü–∏—à–µ–º/—á–∏—Ç–∞–µ–º —Ç–µ–∫—Å—Ç–æ–≤—ã–µ —Ñ–∞–π–ª—ã —Å –ø—É—Ç—è–º–∏. –ü–æ—Ç–æ–º –∫–æ–ø–∏—Ä—É–µ–º/–∞—Ä—Ö–∏–≤–∏—Ä—É–µ–º –ø–æ –∑–∞–¥–∞–Ω–Ω—ã–º –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º"""
    global time_of_modified, archive_choise, copy_choise
    main_text = text_area.get("1.0", "end")
    target_text = text_endpoint.get()
    with open('Files_Backup_path_to.txt', 'w') as path_to_txt:
        path_to_txt.write(target_text)  # –ó–∞–ø–∏—à–µ–º –ø—É—Ç–∏, –∫—É–¥–∞ –±—É–¥–µ–º –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
        path_to_txt.close()
    with open('Files_Backup_path_from.txt', 'w') as path_from_txt:
        path_from_txt.writelines(main_text)  # –ó–∞–ø–∏—à–µ–º –ø—É—Ç–∏, –æ—Ç–∫—É–¥–∞ –±—É–¥–µ–º –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
        path_from_txt.close()
    with open('Files_Backup_path_from.txt') as path_from_txt:
        with open('Files_Backup_path_to.txt') as path_to_txt:
            target_dir_current = rf'{path_to_txt.read()}'
            # –ò—Å—Ö–æ–¥–∏–º –∏–∑ –≤—ã–±–æ—Ä–∞ —Ç–∏–ø–∞ –±—ç–∫–∞–ø–∞: –∫–æ–ø–∏—è/–∞—Ä—Ö–∏–≤
            if archive_choise == 0:
                target_dir = target_dir_current
            elif archive_choise == 1:
                target_dir = target_dir_current + '\\' + 'Archive_Temp'
                os.makedirs(target_dir)  # –°–æ–∑–¥–∞—ë–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É, –∫–æ—Ç–æ—Ä—É—é –∑–∞–∞—Ä—Ö–∏–≤–∏—Ä—É–µ–º
            else:
                pass
            home_path = path_from_txt.read().splitlines()
            for i in home_path:  # –ü—Ä–æ–π–¥—ë–º—Å—è –ø–æ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–æ–∫–µ —Å –ø—É—Ç—ë–º –ø–∞–ø–∫–∏ –∏ –≤—ã—Å—á–∏—Ç–∞–µ–º —Ä–∞–∑–Ω–∏—Ü—É –≤–æ –≤—Ä–µ–º–µ–Ω–∏
                home_dir = rf'{i}'
                time_delta = time.time() - calendar.timegm(time.strptime(f'{date_entry.get()} 00:00:00',
                                                                         '%d.%m.%Y %H:%M:%S'))
                # –ü–æ–µ—Ö–∞–ª–∏!
                for adress, dirs, files in os.walk(home_dir):
                    if adress == home_dir:
                        # –£—Å–ª–æ–≤–∏–µ, –∫–æ—Ç–æ—Ä–æ–µ –ø—Ä–µ–ø—è—Ç—Å—Ç–≤—É–µ—Ç –ø—Ä–æ–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏—é –ø—Ä–æ–≥—Ä–∞–º–º—ã –≤ –¥—Ä—É–≥–∏–µ –ø–∞–ø–∫–∏, –∫—Ä–æ–º–µ —ç—Ç–æ–π
                        for file in files:
                            file_path = os.path.join(home_dir, file)
                            if time.time() - created_or_modified(file_path) < time_delta:
                                shutil.copy(file_path, os.path.join(target_dir, file))
                        if zero_folder == 1 and one_folder == 0 and two_folders == 0 and three_folders == 0 \
                                and four_folders == 0:
                            shutil.copytree(home_dir, target_dir, dirs_exist_ok=True)
                        else:
                            for dir1 in dirs:  # –¶–∏–∫–ª 1
                                dir_path = os.path.join(home_dir, dir1)
                                if time.time() - created_or_modified(dir_path) < time_delta:
                                    dir1_copy = str(target_dir + '\\' + str(dir1))
                                    if os.path.isdir(dir1_copy):
                                        pass
                                    else:
                                        os.mkdir(dir1_copy)
                                    for adress2, dirs2, files2 in os.walk(dir_path):
                                        if adress2 == dir_path:
                                            for file2 in files2:
                                                file_path_2 = os.path.join(dir_path, file2)
                                                if time.time() - created_or_modified(file_path_2) < time_delta:
                                                    shutil.copy(file_path_2, os.path.join(dir1_copy, file2))
                                            if zero_folder == 0 and one_folder == 1 and two_folders == 0 and \
                                                    three_folders == 0 and four_folders == 0:
                                                shutil.copytree(dir_path, dir1_copy, dirs_exist_ok=True)
                                            else:
                                                for dir2 in dirs2:  # –¶–∏–∫–ª 2
                                                    dir_path_2 = os.path.join(dir_path, dir2)
                                                    if time.time() - created_or_modified(dir_path_2) < time_delta:
                                                        dir2_copy = str(
                                                            target_dir + '\\' + str(dir1) + '\\' + str(dir2))
                                                        if os.path.isdir(dir2_copy):
                                                            pass
                                                        else:
                                                            os.mkdir(dir2_copy)
                                                        for adress3, dirs3, files3 in os.walk(dir_path_2):
                                                            if adress3 == dir_path_2:
                                                                for file3 in files3:
                                                                    file_path_3 = os.path.join(dir_path_2, file3)
                                                                    if time.time() - created_or_modified(
                                                                            file_path_3) < time_delta:
                                                                        shutil.copy(file_path_3,
                                                                                    os.path.join(dir2_copy, file3))
                                                                if zero_folder == 0 and one_folder == 0 \
                                                                        and two_folders == 1 and three_folders == 0 and four_folders == 0:
                                                                    shutil.copytree(dir_path_2, dir2_copy, dirs_exist_ok=True)
                                                                else:
                                                                    for dir3 in dirs3:  # –¶–∏–∫–ª 3
                                                                        dir_path_3 = os.path.join(dir_path_2, dir3)
                                                                        if time.time() - created_or_modified(
                                                                                dir_path_3) < time_delta:
                                                                            dir3_copy = str(
                                                                                target_dir + '\\' + str(dir1) + '\\'
                                                                                + str(dir2) + '\\' + str(dir3))
                                                                            if os.path.isdir(dir3_copy):
                                                                                pass
                                                                            else:
                                                                                os.mkdir(dir3_copy)
                                                                            for adress4, dirs4, files4 in os.walk(
                                                                                    dir_path_3):
                                                                                if adress4 == dir_path_3:
                                                                                    for file4 in files4:
                                                                                        file_path_4 = os.path.join(
                                                                                            dir_path_3, file4)
                                                                                        if time.time() - created_or_modified(
                                                                                                file_path_4) < time_delta:
                                                                                            shutil.copy(file_path_4,
                                                                                                        os.path.join(
                                                                                                            dir3_copy,
                                                                                                            file4))
                                                                                    if zero_folder == 0 and one_folder == 0 and two_folders == 0 \
                                                                                            and three_folders == 1 and four_folders == 0:
                                                                                        shutil.copytree(dir_path_3,
                                                                                                        dir3_copy,
                                                                                                        dirs_exist_ok=True)
                                                                                    else:
                                                                                        for dir4 in dirs4:  # –¶–∏–∫–ª 4
                                                                                            dir_path_4 = os.path.join(
                                                                                                dir_path_3, dir4)
                                                                                            if time.time() - created_or_modified(
                                                                                                    dir_path_4) < time_delta:
                                                                                                dir4_copy = str(
                                                                                                    target_dir + '\\' + str(
                                                                                                        dir1) + '\\' + str(
                                                                                                        dir2 + '\\' + str(
                                                                                                            dir3)) + '\\' + str(
                                                                                                        dir4))
                                                                                                if os.path.isdir(
                                                                                                        dir4_copy):
                                                                                                    pass
                                                                                                else:
                                                                                                    os.mkdir(dir4_copy)
                                                                                                for adress5, dirs5, files5 in os.walk(
                                                                                                        dir_path_4):
                                                                                                    if adress5 == dir_path_4:
                                                                                                        for file5 in files5:
                                                                                                            file_path_5 = os.path.join(
                                                                                                                dir_path_4,
                                                                                                                file5)
                                                                                                            if time.time() - created_or_modified(
                                                                                                                    file_path_5) < time_delta:
                                                                                                                shutil.copy(
                                                                                                                    file_path_5,
                                                                                                                    os.path.join(
                                                                                                                        dir4_copy,
                                                                                                                        file5))
                                                                                                        shutil.copytree(
                                                                                                            dir_path_4,
                                                                                                            dir4_copy,
                                                                                                            dirs_exist_ok=True)
                path_to_txt.close()
            path_from_txt.close()
            if archive_choise == 1:  # –ó–∞–∞—Ä—Ö–∏–≤–∏—Ä—É–µ–º –ø—Ä–∏ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–µ–º —É—Å–ª–æ–≤–∏–∏
                arhive_name = target_dir_current + os.sep + 'My_Archive_' + time.strftime('%Y-%d-%m_%H%M%S')
                shutil.make_archive(arhive_name, 'zip', target_dir)
            else:
                pass
            if 'Archive_Temp' in target_dir:
                shutil.rmtree(target_dir)  # –£–¥–∞–ª–∏–º –≤—Ä–µ–º–µ–Ω–Ω—É—é –ø–∞–ø–∫—É, –∫–æ—Ç–æ—Ä–∞—è –∑–∞–∞—Ä—Ö–∏–≤–∏—Ä–æ–≤–∞–ª–∞—Å—å


def main_of_the_main():
    """–°–æ–±–µ—Ä—ë–º –≤ –∫—É—á—É –Ω–∞—à–∏ —Ñ—É–Ω–∫—Ü–∏–∏, –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—Ç–∏–º –æ—à–∏–±–∫–∏ –∏ —Å–∫–æ–ø–∏—Ä—É–µ–º"""
    if text_endpoint.get() in text_area.get("1.0", "end") or os.path.exists(text_endpoint.get()) is False:
        error_window('–ù–µ–≤–µ—Ä–Ω—ã–π –ø—É—Ç—å!')
    elif zero_folder == 0 and one_folder == 0 and two_folders == 0 and three_folders == 0 and four_folders == 0:
        error_window('–í—ã–±–µ—Ä–∏ –≥–ª—É–±–∏–Ω—É –ø–∞–ø–æ–∫!')
    elif archive_choise == 0 and copy_choise == 0:
        error_window('–í—ã–±–µ—Ä–∏ —Ç–∏–ø –±—ç–∫–∞–ø–∞!')
    elif created_or_modified == os.path.getatime:
        error_window('–í—ã–±–µ—Ä–∏ —Å–æ–∑–¥–∞–Ω –∏–ª–∏ –∏–∑–º–µ–Ω—ë–Ω!')
    else:
        main_function()
        final_window()


def save_func():
    """–§—É–Ω–∫—Ü–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø—É—Ç–µ–π –≤ —Ñ–∞–π–ª"""
    main_text = text_area.get("1.0", "end")
    target_text = text_endpoint.get()
    with open('Files_Backup_path_to.txt', 'w') as path_to_txt:
        path_to_txt.write(target_text)  # –ó–∞–ø–∏—à–µ–º –ø—É—Ç–∏, –∫—É–¥–∞ –±—É–¥–µ–º –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
        path_to_txt.close()
    with open('Files_Backup_path_from.txt', 'w') as path_from_txt:
        path_from_txt.writelines(main_text)  # –ó–∞–ø–∏—à–µ–º –ø—É—Ç–∏, –æ—Ç–∫—É–¥–∞ –±—É–¥–µ–º –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
        path_from_txt.close()


def clean_func():
    """–§—É–Ω–∫—Ü–∏—è –æ—á–∏—Å—Ç–∫–∏ –ø–æ–ª–µ–π –∏ —Ñ–∞–π–ª–∞"""
    text_area.delete("1.0", 'end')
    text_endpoint.delete(0, 'end')
    main_text = text_area.get("1.0", "end")
    target_text = text_endpoint.get()
    with open('Files_Backup_path_to.txt', 'w') as path_to_txt:
        path_to_txt.write(target_text)  # –ó–∞–ø–∏—à–µ–º –ø—É—Ç–∏, –∫—É–¥–∞ –±—É–¥–µ–º –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
        path_to_txt.close()
    with open('Files_Backup_path_from.txt', 'w') as path_from_txt:
        path_from_txt.writelines(main_text)  # –ó–∞–ø–∏—à–µ–º –ø—É—Ç–∏, –æ—Ç–∫—É–¥–∞ –±—É–¥–µ–º –∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å
        path_from_txt.close()


# –ö–Ω–æ–ø–∫–∏
but_close = tk.Button(choise_frame, text='–í—ã–π—Ç–∏', font=('Arial', 12), height=2, width=6, command=exit)
but_close.pack(side=tk.RIGHT)
label_behind_but = tk.Label(choise_frame, background='#EEEEEE', height=3, width=1)
label_behind_but.pack(side=tk.RIGHT)
but_go = tk.Button(choise_frame, text='Go!', font=('Arial', 12, 'bold'), height=2, width=6, command=main_of_the_main)
but_go.pack(side=tk.RIGHT)
label_behind_but_2 = tk.Label(choise_frame, background='#EEEEEE', height=3, width=1)
label_behind_but_2.pack(side=tk.RIGHT)
but_save = tk.Button(choise_frame, text='üíæ', font=('Arial', 12), height=2, width=6, command=save_func)
but_save.pack(side=tk.RIGHT)
label_behind_but_3 = tk.Label(choise_frame, background='#EEEEEE', height=3, width=1)
label_behind_but_3.pack(side=tk.RIGHT)
but_clean = tk.Button(choise_frame, text='üóë', font=('Arial', 12), height=2, width=6, command=clean_func)
but_clean.pack(side=tk.RIGHT)

root.mainloop()
